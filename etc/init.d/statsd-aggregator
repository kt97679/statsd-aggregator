#!/bin/bash

# chkconfig: 345 99 1
# description: statsd-aggregator collects multiple messages and sends them in larger UDP packages to statsd

set -e -u

# readlink is needed in case script is run via symlinks. By using readlink -f we would know name of original file.
SERVICE=$(basename $(readlink -f $0))
PID_FILE=/var/run/${SERVICE}.pid
CMD=/usr/bin/${SERVICE}
CONF_FILE="/etc/${SERVICE}.conf"
CMD_OPTIONS="$CONF_FILE"

[ -r "$CONF_FILE" ] || {
    echo "Can't find config file \"$CONF_FILE\""
    exit 1
}

get_lock() {
    local pid
    while true; do
        for pid in $(cat $PID_FILE 2>/dev/null); do
            kill -0 $pid 2>/dev/null || continue
            [ "$pid" != "$BASHPID" ] && return 1
            echo $BASHPID >$PID_FILE.new && mv $PID_FILE.new $PID_FILE && return 0
        done
        echo $BASHPID >>$PID_FILE
    done
}

start() {
    echo -n "Starting $CMD ..."
    ! get_lock && echo " already started" && return
    $CMD $CMD_OPTIONS 0<&- 2>&1 | logger -i -t ${SERVICE} >/dev/null 2>&1 &
    jobs -p > ${PID_FILE}.new && mv $PID_FILE.new $PID_FILE && echo " done" && disown && return 0
    echo "failed"
    return 1
}

stop() {
    echo -n "Stopping $CMD ..."
    get_lock && echo " already stopped" && return
    pid=$(cat $PID_FILE)
    for sig in KILL TERM ; do
        kill -${sig} $pid 2>/dev/null || true # killing already terminated process should not cause error
        for ((i = 0; i < 30; i++)) {
            kill -0 $pid 2>/dev/null && echo -n "." && sleep 1 && continue
            echo " done" && return 0
        }
   done
   echo "failed"
   return 1
}

status() {
    exit_code=0
    not=''
    get_lock && exit_code=1 && not='not '
    echo "$CMD is ${not}running"
    exit $exit_code
}

case "${1:-}" in
    start)      start ;;
    stop)       stop ;;
    restart)    stop && start ;;
    status)     status ;;
    *)          echo "Usage: $0 start|stop|restart|status" && exit 1 ;;
esac
